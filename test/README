#include <Arduino.h> // Thư viện ESP32 hệ thống
#include <WiFi.h> // Quản lý Wi-Fi cho ESP32
#include <HTTPClient.h> // Gửi yêu cầu HTTP
#include <ArduinoJson.h> // Phân tích và tạo JSON
#include <Adafruit_Thermal.h> // Thư viện điều khiển máy in nhiệt Adafruit
#include <Adafruit_SH1106.h> // OLED SH1106
#include "FontMaker.h" // Thư viện tạo font tùy chỉnh
#include <DHT.h> // Thư viện cảm biến nhiệt độ độ ẩm DHT11
#include "freertos/FreeRTOS.h" // FreeRTOS cho ESP32
#include "freertos/task.h" // Quản lý task trong FreeRTOS

#include "lcd_build.h" // Quản lý màn hình LCD
#include "wifi_build.h" // Quản lý kết nối WiFi
#include "drawer_build.h" // Điều khiển tủ khóa

// --- CẤU HÌNH CỔNG CHO ĐẦU ĐỌC GM65 ---
#define GM65_RX 16 // RX của GM65 nối ESP32 TX16
#define GM65_TX 17 // TX của GM65 nối ESP32 RX17
HardwareSerial GM65(2); // Tạo đối tượng Serial thứ 2 cho GM65

// --- CẤU HÌNH CHÂN CHO MÁY IN NHIỆT ---
#define PRINTER_RX_PIN 3 // RX máy in (ESP TX3)
#define PRINTER_TX_PIN 1 // TX máy in (ESP RX1)
Adafruit_Thermal printer(&Serial1); // Máy in nhiệt sử dụng Serial1

// --- CẤU HÌNH NÚT NHẤN ---
#define BUTTON_PIN 18 // Nút nhấn dùng chân GPIO18

// --- CẤU HÌNH CÁC CHÂN ĐIỀU KHIỂN KHÓA ---
#define LOCK_1 14
#define LOCK_2 27
#define LOCK_3 26

#define BUZZER 25 // Chân điều khiển loa cảnh báo

// --- CẢM BIẾN NHIỆT ĐỘ DHT11 ---
#define DHTPIN 33 // DHT11 nối chân GPIO33
#define DHTTYPE DHT11 // Loại cảm biến là DHT11
DHT dht(DHTPIN, DHTTYPE); // Khởi tạo đối tượng DHT

#define DEBOUNCE_DELAY 50 // Thời gian chống rung nút nhấn (50ms)
unsigned long lastDebounceTime = 0;
bool lastButtonState = HIGH;
bool buttonState = HIGH;

// --- HANDLE CỦA TASK ---
TaskHandle_t StatusTaskHandle;
TaskHandle_t TempTaskHandle;

// --- HÀM LẤY CODE TỦ VÀ G TỪ SERVER ---
String getLockerCode() {
HTTPClient http;
http.begin("https://www.lephonganhtri.id.vn/api/request");
int httpCode = http.GET();
if (httpCode == 200) {
StaticJsonDocument<256> doc;
DeserializationError err = deserializeJson(doc, http.getString());
if (!err && doc["locker"]["code"]) return doc["locker"]["code"].as<String>();
}
http.end();
return "";
}

// --- HÀM LẤY SỐ TỦ TỪ MÃ CODE ---
int getLockerNumberByCode(const String& code) {
HTTPClient http;
http.begin("https://www.lephonganhtri.id.vn/api/lockers");
int httpCode = http.GET();
if (httpCode == 200) {
StaticJsonDocument<1024> doc;
DeserializationError err = deserializeJson(doc, http.getString());
if (!err) {
for (JsonObject locker : doc["lockers"].as<JsonArray>()) {
if (code == locker["code"].as<String>()) return locker["number"];
}
}
}
http.end();
return -1;
}

// --- GỬI YÊU CẦU MỞ TỦ BẰNG MÃ CODE ---
bool openLockerByCode(const String& code) {
HTTPClient http;
http.begin("https://www.lephonganhtri.id.vn/api/unlock");
http.addHeader("Content-Type", "application/json");
StaticJsonDocument<128> jsonDoc;
jsonDoc["code"] = code;
String body;
serializeJson(jsonDoc, body);
int httpCode = http.POST(body);
http.end();
return (httpCode == 200);
}

// --- CỜ ĐỂ KIỂM TRA SỰ THAY ĐỔI TRẠNG THÁI TỦ ---
bool c1 = true, c2 = true, c3 = true;

// --- CẬP NHẬT TRẠNG THÁI TỦ TỪ SERVER ---
void statusLockerCode() {
HTTPClient http;
http.begin("https://www.lephonganhtri.id.vn/api/lockers");
int httpCode = http.GET();
if (httpCode == 200) {
StaticJsonDocument<1024> doc;
if (!deserializeJson(doc, http.getString())) {
for (JsonObject locker : doc["lockers"].as<JsonArray>()) {
int num = locker["number"];
bool isLocked = locker["isLocked"];
bool isUnHire = locker["code"].as<String>().isEmpty();
int times = locker["times"].as<int>();

        // Đóng/mở khóa vật lý
        if (isLocked) {
          if (num == 1) digitalWrite(LOCK_1, LOW);
          if (num == 2) digitalWrite(LOCK_2, LOW);
          if (num == 3) digitalWrite(LOCK_3, LOW);
        } else {
          if (num == 1) digitalWrite(LOCK_1, HIGH);
          if (num == 2) digitalWrite(LOCK_2, HIGH);
          if (num == 3) digitalWrite(LOCK_3, HIGH);
        }

        // Kiểm tra hiển thị thông báo "Vui lòng mở tủ"
        bool shouldDisplay = false;
        if (num == 1 && c1 != isUnHire && isUnHire) shouldDisplay = true;
        else if (num == 2 && c2 != isUnHire && isUnHire) shouldDisplay = true;
        else if (num == 3 && c3 != isUnHire && isUnHire) shouldDisplay = true;

        if (shouldDisplay && (times == 1 || times == 2)) {
          lcd.clearDisplay();
          printLCD(15, 0, "Vui Lòng Mở");
          printLCD(20, 16, String("Tủ Số: ") + num);
          printLCD(0, 32, "Tủ Sẽ Đóng Lại");
          printLCD(0, 48, "Sau 5 Giây !");
          lcd.display();
          delay(5000);
        }

        // Cập nhật trạng thái cờ
        if (num == 1) c1 = isUnHire;
        else if (num == 2) c2 = isUnHire;
        else if (num == 3) c3 = isUnHire;
      }

      drawEmptySquares(c1, c2, c3);  // Vẽ lại giao diện tủ trên OLED
    }

}
http.end();
}

// --- TASK KIỂM TRA TRẠNG THÁI TỦ ---
void statusTask(void \*param) {
vTaskDelay(2000 / portTICK_PERIOD_MS); // Delay ban đầu
while (true) {
if (WiFi.status() == WL_CONNECTED) statusLockerCode();
vTaskDelay(2000 / portTICK_PERIOD_MS); // Cập nhật mỗi 2 giây
}
}

// --- HÀM IN MÃ QR CODE ---
void printQRCode(const char \*data) {
int len = strlen(data);
printer.write(0x1D); printer.write('('); printer.write('k'); printer.write(4); printer.write(0);
printer.write(0x31); printer.write(0x41); printer.write(2); printer.write(0);
printer.write(0x1D); printer.write('('); printer.write('k'); printer.write(3); printer.write(0);
printer.write(0x31); printer.write(0x43); printer.write(4);
printer.write(0x1D); printer.write('('); printer.write('k'); printer.write(3); printer.write(0);
printer.write(0x31); printer.write(0x45); printer.write(48);
printer.write(0x1D); printer.write('('); printer.write('k'); printer.write(len + 3); printer.write(0);
printer.write(0x31); printer.write(0x50); printer.write(0x30); printer.print(data);
printer.write(0x1D); printer.write('('); printer.write('k'); printer.write(3); printer.write(0);
printer.write(0x31); printer.write(0x51); printer.write(0x30);
}

// --- XỬ LÝ NÚT NHẤN ĐỂ IN MÃ QR ---
void handleButtonQR() {
bool reading = digitalRead(BUTTON_PIN);
if (reading != lastButtonState) lastDebounceTime = millis();

if ((millis() - lastDebounceTime) > DEBOUNCE_DELAY && reading != buttonState) {
buttonState = reading;
if (buttonState == LOW) {
String code = getLockerCode();

      if (!code.isEmpty()) {
        printer.justify('C');
        printQRCode(code.c_str());
        printer.feed(11);

        int lockerNumber = getLockerNumberByCode(code);
        if (lockerNumber > 0) {
          lcd.clearDisplay();
          printLCD(15, 0, "Bạn Đã Thuê");
          printLCD(20, 16, String("Tủ Số: ") + lockerNumber);
          lcd.display();
          delay(5000);
        } else {
          lcd.clearDisplay();
          printLCD(12, 0, "Không Tìm Thấy Tủ");
          lcd.display();
          delay(3000);
        }
      } else {
        lcd.clearDisplay();
        printLCD(12, 0, "Hết Tủ Trống");
        printLCD(0, 16, "Vui Lòng Thử Lại");
        printLCD(0, 32, "Sau !");
        lcd.display();
        delay(3000);
        statusLockerCode();
      }
    }

}
lastButtonState = reading;
}

// --- XỬ LÝ ĐẦU ĐỌC GM65 ---
void handleGM65Scanner() {

if (GM65.available()) {
String scanned = GM65.readStringUntil('\n');
scanned.trim();
if (scanned.length()) {
Serial.print("Mã quét được: ");
Serial.println(scanned);
digitalWrite(BUZZER, HIGH);
vTaskDelay(200 / portTICK_PERIOD_MS); // thời gian phát chuông 200ms
digitalWrite(BUZZER, LOW);
openLockerByCode(scanned);
}
}
}

// --- GỬI NHIỆT ĐỘ LÊN SERVER ---
void sendTemperatureToServer(float temperature) {
if (WiFi.status() != WL_CONNECTED) return;

HTTPClient http;
http.begin("https://www.lephonganhtri.id.vn/api/temperature");
http.addHeader("Content-Type", "application/json");

StaticJsonDocument<128> doc;
doc["temperature"] = temperature;
String body;
serializeJson(doc, body);

int httpCode = http.POST(body);
Serial.printf("Temp HTTP Code: %d\n", httpCode);
http.end();
}

// --- TASK GỬI NHIỆT ĐỘ ĐỊNH KỲ VÀ CẢNH BÁO ---
void temperatureTask(void \*param) {
while (true) {
float temp = dht.readTemperature();
if (!isnan(temp)) {
Serial.printf("Temperature: %.1f C\n", temp);
sendTemperatureToServer(temp);

      if (temp > 40.0) {
        for (int i = 0; i < 3; i++) {
          digitalWrite(BUZZER, HIGH);
          vTaskDelay(2000 / portTICK_PERIOD_MS);
          digitalWrite(BUZZER, LOW);
          vTaskDelay(2000 / portTICK_PERIOD_MS);
        }
      }
    } else {
      Serial.println("Failed to read from DHT11.");
    }
    vTaskDelay(3000 / portTICK_PERIOD_MS);

}
}

// --- SETUP HỆ THỐNG ---
void setup() {
Serial.begin(115200);
initLCD();
if (!connectToWiFi()) {
delay(5000);
ESP.restart();
}

Serial1.begin(9600, SERIAL_8N1, PRINTER_RX_PIN, PRINTER_TX_PIN);
GM65.begin(9600, SERIAL_8N1, GM65_RX, GM65_TX);
dht.begin();

pinMode(BUTTON_PIN, INPUT_PULLUP); // Nút nhấn ở trạng thái HIGH mặc định
pinMode(LOCK_1, OUTPUT);
pinMode(LOCK_2, OUTPUT);
pinMode(LOCK_3, OUTPUT);
pinMode(BUZZER, OUTPUT);

digitalWrite(LOCK_1, LOW);
digitalWrite(LOCK_2, LOW);
digitalWrite(LOCK_3, LOW);
digitalWrite(BUZZER, LOW);

statusLockerCode(); // Cập nhật trạng thái ban đầu

xTaskCreatePinnedToCore(statusTask, "StatusTask", 8192, NULL, 1, &StatusTaskHandle, 1);
xTaskCreatePinnedToCore(temperatureTask, "TempTask", 8192, NULL, 1, &TempTaskHandle, 1);

Serial.println("Setup complete. Ready to print QR, read GM65 and monitor temperature.");
}

// --- VÒNG LẶP CHÍNH ---
void loop() {

if (WiFi.status() != WL_CONNECTED && !connectToWiFi()) {
delay(5000);
return;
}

handleButtonQR(); // Kiểm tra nút nhấn in QR
handleGM65Scanner(); // Kiểm tra đầu đọc mã
delay(10);
}
